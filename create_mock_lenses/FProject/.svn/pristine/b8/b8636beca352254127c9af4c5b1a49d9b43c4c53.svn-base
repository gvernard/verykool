#ifndef SOURCE_PROFILE_HPP
#define SOURCE_PROFILE_HPP

#include <cmath>


class BaseProfile {
public:
  double x0;
  double y0;
  double pa;
  double q;
  double reff;
  double ieff;
  int npoly;
  double* x;
  double* y;
  const double pi  = 3.14159265358979323846;
  const double fac = 0.01745329251;
  
  BaseProfile(double a,double b,double c,double d,double e,double f): x0(a), y0(b), pa(c), q(d), reff(e), ieff(f), npoly(100) {
    this->x = (double*) calloc(this->npoly,sizeof(double));
    this->y = (double*) calloc(this->npoly,sizeof(double));
    ellipticalContour();
  };
  ~BaseProfile(){
    free(x);
    free(y);
  }

  virtual double value(double x,double y) = 0;

  void profile(int Sj,int Si,double* sx,double* sy,double* s){
    for(int i=0;i<Si;i++){
      for(int j=0;j<Sj;j++){
	s[i*Sj+j] += this->value(sx[i*Sj+j],sy[i*Sj+j]);
      }
    }
  }

  void ellipticalContour(){
    double dt     = (2.*this->pi)/(this->npoly);
    double cosphi = cos(this->pa*this->fac);//in rad
    double sinphi = sin(this->pa*this->fac);//in rad
    double size   = this->reff/2.;

    for(int i=0;i<this->npoly;i++){
      this->x[i] = ( size*cos(i*dt)*cosphi - size*this->q*sin(i*dt)*sinphi ) + this->x0;
      this->y[i] = ( size*cos(i*dt)*sinphi + size*this->q*sin(i*dt)*cosphi ) + this->y0;
    }
  }

};
  



class Sersic: public BaseProfile {
public:
  double index;
  Sersic(double a,double b,double c,double d,double e,double f,double g): BaseProfile(a,b,c,d,e,f), index(g) {};

  double value(double x,double y){
    double bn = 1.9992*this->index - 0.3271;//From Capaccioli 1989
    double u,v,r,fac2;
    double cosphi = cos(this->pa*this->fac);
    double sinphi = sin(this->pa*this->fac);

    u =   (x - this->x0)*cosphi + (y - this->y0)*sinphi;
    v = - (x - this->x0)*sinphi + (y - this->y0)*cosphi;
    r = sqrt(this->q*this->q*u*u + v*v);
    fac2 = pow(r/this->reff,1./this->index);
    return this->ieff*exp(-bn*fac2 - 1);
  }
};


class Gaussian: public BaseProfile {
public:
  Gaussian(double a,double b,double c,double d,double e,double f): BaseProfile(a,b,c,d,e,f) {}

  double value(double x,double y){

    double u,v,r2;
    double cosphi = cos(this->pa*this->fac);
    double sinphi = sin(this->pa*this->fac);  
    double sdev   = 2*this->reff*this->reff;

    u =   (x - this->x0)*cosphi + (y - this->y0)*sinphi;
    v = - (x - this->x0)*sinphi + (y - this->y0)*cosphi;
    r2 = (this->q*this->q*u*u + v*v)/sdev;
    //    return (this->ieff*exp(-r2)/(sqrt(sdev*3.14159)));
    return this->ieff*exp(-r2);
  }
};





#endif /* SOURCE_PROFILE_HPP */
